def extract_currency_and_unit_for_table(table_df, full_markdown: str) -> dict:
    """
    Extract both currency and unit for a table using hybrid approach.
    Returns dict like {"currency": "INR", "unit": "Crores"} or {"currency": "Unknown", "unit": "Unknown"}
    """
    
    result = {"currency": "Unknown", "unit": "Unknown"}
    
    # ===== STEP 1: Check column headers (highest priority) =====
    for col in table_df.columns:
        col_str = str(col).lower()
        
        # Check for currency in headers
        if 'inr' in col_str or '₹' in col_str or 'rupee' in col_str or 'rs.' in col_str or 'rs ' in col_str:
            result["currency"] = "INR"
        elif 'usd' in col_str or '$' in col_str or 'dollar' in col_str:
            result["currency"] = "USD"
        elif 'eur' in col_str or '€' in col_str or 'euro' in col_str:
            result["currency"] = "EUR"
        elif 'gbp' in col_str or '£' in col_str or 'pound' in col_str:
            result["currency"] = "GBP"
        elif 'jpy' in col_str or '¥' in col_str or 'yen' in col_str:
            result["currency"] = "JPY"
        
        # Check for unit in headers
        if 'crore' in col_str or 'cr.' in col_str or 'cr ' in col_str:
            result["unit"] = "Crores"
        elif 'lakh' in col_str or 'lac' in col_str:
            result["unit"] = "Lakhs"
        elif 'million' in col_str or 'mn' in col_str:
            result["unit"] = "Millions"
        elif 'billion' in col_str or 'bn' in col_str:
            result["unit"] = "Billions"
        elif 'thousand' in col_str or 'k ' in col_str:
            result["unit"] = "Thousands"
        elif 'trillion' in col_str or 'tn' in col_str:
            result["unit"] = "Trillions"
    
    # ===== STEP 2: Get text around table (look for patterns) =====
    if len(table_df) > 0 and len(table_df.columns) > 0:
        first_cell = str(table_df.iloc[0, 0])[:50]
        
        if first_cell in full_markdown:
            pos = full_markdown.find(first_cell)
            # Get 500 chars before and 200 after table
            context_before = full_markdown[max(0, pos-500):pos]
            context_after = full_markdown[pos:min(len(full_markdown), pos+200)]
            context = context_before + context_after
            
            # Currency patterns
            currency_patterns = [
                (r'(?:in|of)?\s*(?:Rs\.?|INR|₹)\s', 'INR'),
                (r'(?:in|of)?\s*(?:USD|\$|US\$)\s', 'USD'),
                (r'(?:in|of)?\s*(?:EUR|€)\s', 'EUR'),
                (r'(?:in|of)?\s*(?:GBP|£)\s', 'GBP'),
                (r'(?:in|of)?\s*(?:JPY|¥)\s', 'JPY'),
                (r'Indian\s+Rupees?', 'INR'),
                (r'US\s+Dollars?', 'USD'),
            ]
            
            # Unit patterns
            unit_patterns = [
                (r'\(.*?in.*?(?:Rs\.?|INR|₹)\s*Crores?\)', 'Crores'),
                (r'\(.*?in.*?(?:Rs\.?|INR|₹)\s*Lakhs?\)', 'Lakhs'),
                (r'\(.*?in.*?(?:Rs\.?|INR|₹)\s*Millions?\)', 'Millions'),
                (r'\(.*?in.*?(?:Rs\.?|INR|₹)\s*Billions?\)', 'Billions'),
                (r'\(.*?in.*?(?:Rs\.?|INR|₹)\s*Thousands?\)', 'Thousands'),
                (r'Amount.*?in.*?Crores?', 'Crores'),
                (r'Amount.*?in.*?Lakhs?', 'Lakhs'),
                (r'Amount.*?in.*?Millions?', 'Millions'),
                (r'Amount.*?in.*?Billions?', 'Billions'),
                (r'Amount.*?in.*?Thousands?', 'Thousands'),
                (r'(?:in|of)\s+Crores?', 'Crores'),
                (r'(?:in|of)\s+Lakhs?', 'Lakhs'),
                (r'(?:in|of)\s+Millions?', 'Millions'),
                (r'(?:in|of)\s+Billions?', 'Billions'),
            ]
            
            if result["currency"] == "Unknown":
                for pattern, currency in currency_patterns:
                    if re.search(pattern, context, re.IGNORECASE):
                        result["currency"] = currency
                        break
            
            if result["unit"] == "Unknown":
                for pattern, unit in unit_patterns:
                    if re.search(pattern, context, re.IGNORECASE):
                        result["unit"] = unit
                        break
    
    # ===== STEP 3: Check page header =====
    header = full_markdown[:1000]
    
    if result["currency"] == "Unknown":
        if re.search(r'All.*?amount.*?in.*?(?:Rs\.?|INR|₹|Indian\s+Rupees?)', header, re.IGNORECASE):
            result["currency"] = "INR"
        elif re.search(r'All.*?amount.*?in.*?(?:USD|\$|US\s+Dollars?)', header, re.IGNORECASE):
            result["currency"] = "USD"
    
    if result["unit"] == "Unknown":
        if re.search(r'All.*?amount.*?in.*?Crores?', header, re.IGNORECASE):
            result["unit"] = "Crores"
        elif re.search(r'All.*?amount.*?in.*?Lakhs?', header, re.IGNORECASE):
            result["unit"] = "Lakhs"
        elif re.search(r'All.*?amount.*?in.*?Millions?', header, re.IGNORECASE):
            result["unit"] = "Millions"
        elif re.search(r'All.*?amount.*?in.*?Billions?', header, re.IGNORECASE):
            result["unit"] = "Billions"
    
    # ===== STEP 4: If still not found, ask LLM =====
    if result["currency"] == "Unknown" or result["unit"] == "Unknown":
        prompt = f"""You are a financial document analyzer. Extract the CURRENCY and UNIT from this table.

CONTEXT (surrounding text):
{full_markdown[:1500]}

TABLE (first 3 rows):
{table_df.head(3).to_markdown(index=False)}

TASK:
1. Identify the CURRENCY used (e.g., INR, USD, EUR, GBP, JPY, etc.)
   - Look for symbols: ₹, $, €, £, ¥
   - Look for codes: INR, USD, EUR, GBP, JPY
   - Look for words: Rupees, Dollars, Euros, Pounds, Yen
   - Common in Indian reports: INR/Rs./Rupees

2. Identify the UNIT/SCALE of amounts (e.g., Crores, Lakhs, Millions, Billions, Thousands, etc.)
   - In India: Crores (10^7), Lakhs (10^5)
   - International: Millions (10^6), Billions (10^9), Thousands (10^3), Trillions (10^12)
   - Look in: table headers, column names, surrounding text, parentheses

IMPORTANT RULES:
- Return ONLY valid JSON format
- If you cannot find currency, return "Unknown"
- If you cannot find unit, return "Unknown"
- Be precise - don't guess
- Check table headers, column names, and surrounding context carefully

Return ONLY this JSON format (no extra text):
{{
  "currency": "INR",
  "unit": "Crores"
}}

Examples of valid responses:
{{"currency": "USD", "unit": "Millions"}}
{{"currency": "INR", "unit": "Lakhs"}}
{{"currency": "EUR", "unit": "Billions"}}
{{"currency": "Unknown", "unit": "Thousands"}}

Your response:"""
        
        try:
            response = llama_client(prompt).strip()
            
            # Try to parse JSON response
            llm_result = parse_llama_json_response(response)
            
            if isinstance(llm_result, dict):
                if result["currency"] == "Unknown" and "currency" in llm_result:
                    result["currency"] = llm_result["currency"]
                if result["unit"] == "Unknown" and "unit" in llm_result:
                    result["unit"] = llm_result["unit"]
        except Exception as e:
            print(f"Warning: LLM extraction failed: {e}")
    
    return result


def create_table_with_context(OUTPUT_PDF_PATH):
    """
    Create tables with context awareness - UPDATED VERSION
    """
    pdf_name = os.path.splitext(os.path.basename(OUTPUT_PDF_PATH))[0]
    output_folder = f"{pdf_name}_tables"
    os.makedirs(output_folder, exist_ok=True)

    result = get_docling_results(OUTPUT_PDF_PATH)
    full_markdown = result.document.export_to_markdown()
    
    previous_page_num = None
    current_page_table_count = 0
    
    for table_ix, table in enumerate(result.document.tables):
        current_page_num = table.dict()['prov'][0]['page_no']

        if previous_page_num is None:
            previous_page_num = current_page_num

        if previous_page_num == current_page_num:
            current_page_table_count += 1
        else:
            current_page_table_count = 1

        sheet_name = f"Page_no_{current_page_num}_table_{current_page_table_count}"

        table_df: pd.DataFrame = table.export_to_dataframe()
        table_df.columns = [ILLEGAL_CHARACTERS_RE.sub("", str(col)) for col in table_df.columns]
        table_df = clean_illegal_chars(table_df)

        # Use context-aware classification
        classification_result = classifyTable_with_context_check(
            table_df.to_markdown(), 
            table_ix, 
            full_markdown
        )
        
        print(f"Classification result for {sheet_name}: {classification_result}")

        if "true" in classification_result.lower():
            # Extract currency and unit
            currency_unit = extract_currency_and_unit_for_table(table_df, full_markdown)
            print(f"  Currency: {currency_unit['currency']}, Unit: {currency_unit['unit']}")
            
            # Add both as columns
            table_df['Currency'] = currency_unit['currency']
            table_df['Unit'] = currency_unit['unit']
            
            # Save to folder with currency and unit in filename
            filename = f"{sheet_name}_{currency_unit['currency']}_{currency_unit['unit']}.xlsx"
            filepath = os.path.join(output_folder, filename)
            table_df.to_excel(filepath, index=False)
            
            print(f"  ✓ Saved: {filepath}")
        
        previous_page_num = current_page_num
